#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// List of keywords
const char *keywords[] = {
    "int", "float", "if", "else", "while", "do", "return", "for", "char", "double", "void"
};

int isKeyword(const char *word) {
    for (int i = 0; i < sizeof(keywords)/sizeof(keywords[0]); i++) {
        if (strcmp(word, keywords[i]) == 0)
            return 1;
    }
    return 0;
}

int isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
           ch == '=' || ch == '<' || ch == '>' || ch == '!';
}

int isDelimiter(char ch) {
    return ch == ';' || ch == ',' || ch == '(' || ch == ')' ||
           ch == '{' || ch == '}' || ch == '[' || ch == ']';
}

void analyzeFile(FILE *fp) {
    char ch, buffer[100];
    int i = 0;

    while ((ch = fgetc(fp)) != EOF) {
        // Skip whitespace
        if (isspace(ch)) {
            continue;
        }

        // Handle identifiers and keywords
        if (isalpha(ch) || ch == '_') {
            buffer[i++] = ch;
            while (isalnum(ch = fgetc(fp)) || ch == '_') {
                buffer[i++] = ch;
            }
            buffer[i] = '\0';
            i = 0;
            ungetc(ch, fp);

            if (isKeyword(buffer))
                printf("Keyword     : %s\n", buffer);
            else
                printf("Identifier  : %s\n", buffer);
        }

        // Handle numbers
        else if (isdigit(ch)) {
            buffer[i++] = ch;
            while (isdigit(ch = fgetc(fp))) {
                buffer[i++] = ch;
            }
            buffer[i] = '\0';
            i = 0;
            ungetc(ch, fp);
            printf("Number      : %s\n", buffer);
        }

        // Handle operators
        else if (isOperator(ch)) {
            char next = fgetc(fp);
            if ((ch == '=' || ch == '<' || ch == '>' || ch == '!') && next == '=') {
                printf("Operator    : %c%c\n", ch, next);
            } else {
                printf("Operator    : %c\n", ch);
                ungetc(next, fp);
            }
        }

        // Handle comments
        else if (ch == '/') {
            char next = fgetc(fp);
            if (next == '/') {
                // Single-line comment
                while ((ch = fgetc(fp)) != EOF && ch != '\n');
                printf("Comment     : // (single-line)\n");
            } else if (next == '*') {
                // Multi-line comment
                while ((ch = fgetc(fp)) != EOF) {
                    if (ch == '*' && fgetc(fp) == '/')
                        break;
                }
                printf("Comment     : /*...*/ (multi-line)\n");
            } else {
                printf("Operator    : /\n");
                ungetc(next, fp);
            }
        }

        // Handle delimiters
        else if (isDelimiter(ch)) {
            printf("Delimiter   : %c\n", ch);
        }

        // Handle unrecognized characters
        else {
            printf("Unknown     : %c\n", ch);
        }
    }
}

int main() {
    FILE *fp;
    char filename[100];

    printf("Enter the filename to analyze (e.g., input.c): ");
    scanf("%s", filename);

    fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Error: Could not open file.\n");
        return 1;
    }

    printf("\nLexical Analysis Output:\n\n");
    analyzeFile(fp);

    fclose(fp);
    return 0;
}
